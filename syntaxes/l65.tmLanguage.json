{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"fileTypes": [
		"l65"
	],
	"firstLineMatch": "\\A#!.*?\\bl65(\\d+(\\.\\d+)?)?\\b|\\A--\\s+-\\*-\\s*l65\\s*-\\*-",
	"name": "l65",
	"scopeName": "source.l65",
	"patterns": [
		{
			"include": "#general"
		}
	],
	"repository": {
		"general": {
			"patterns": [
				{
					"include": "#line-comment"
				},
				{
					"include": "#block-comment"
				},
				{
					"include": "#l65-preproc"
				},
				{
					"include": "#label"
				},
				{
					"include": "#section"
				},
				{
					"include": "#l65-operator"
				},
				{
					"include": "#l65-datafn"
				},
				{
					"include": "#l65-keyword"
				},
				{
					"include": "#l65-keyword-opcodefn"
				},
				{
					"include": "#l65-keyword-opcodefn-illegal"
				},
				{
					"include": "#l65-keyword-opcodefn-alias"
				},
				{
					"include": "#opcodes"
				},
				{
					"include": "#opcodes-illegal"
				},
				{
					"include": "#opcodes-crossbank"
				},
				{
					"include": "#opcodes-alias"
				},
				{
					"include": "#number"
				},
				{
					"include": "#constant"
				},
				{
					"include": "#single-quote-string"
				},
				{
					"include": "#double-quote-string"
				},
				{
					"include": "#multi-line-string"
				},
				{
					"include": "#if-block"
				},
				{
					"include": "#for-block"
				},
				{
					"include": "#while-block"
				},
				{
					"include": "#repeat-block"
				},
				{
					"include": "#samepage-block"
				},
				{
					"include": "#crosspage-block"
				},
				{
					"include": "#logic-operator"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#keyword"
				},
				{
					"include": "#table-function"
				},
				{
					"include": "#function"
				},
				{
					"include": "#anonymous-function"
				},
				{
					"include": "#support-function-call"
				},
				{
					"include": "#support-string-function-call"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#string-function-call"
				},
				{
					"include": "#table"
				},
				{
					"include": "#array"
				},
				{
					"include": "#table-property"
				},
				{
					"include": "#language-variable"
				},
				{
					"include": "#support-variable"
				},
				{
					"include": "#variable"
				}
			]
		},
		"line-comment": {
			"name": "comment.line.double-dash.lua",
			"begin": "(--)(?!(\\[=*\\[|\\]=*\\]))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.lua"
				}
			},
			"end": "($)\n?",
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"block-comment": {
			"name": "comment.block.lua",
			"begin": "--\\[(=*)\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.lua"
				}
			},
			"end": "\\]\\1\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.lua"
				}
			},
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"codetags": {
			"match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)",
			"captures": {
				"1": {
					"name": "keyword.codetag.notation.lua"
				}
			}
		},
		"constant": {
			"name": "constant.language.lua",
			"match": "\\b(nil|true|false|_G|_VERSION|\\.\\.\\.)\\b"
		},
		"number": {
			"name": "constant.numeric.lua",
			"match": "(?<![\\d.])\\b0[bB][01]+|(?<![\\d.])\\b0[xX][a-fA-F\\d]+|\\b\\d+(\\.\\d+)?([eE]-?\\d+)?|\\.\\d+([eE]-?\\d+)?"
		},
		"single-quote-string": {
			"name": "string.quoted.single.lua",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lua"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.lua"
				}
			},
			"patterns": [
				{
					"match": "\\\\(\\d{1,3}|.)",
					"name": "constant.character.escape.lua"
				}
			]
		},
		"double-quote-string": {
			"name": "string.quoted.double.lua",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lua"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.lua"
				}
			},
			"patterns": [
				{
					"match": "\\\\(\\d{1,3}|.)",
					"name": "constant.character.escape.lua"
				}
			]
		},
		"multi-line-string": {
			"name": "string.quoted.block.lua",
			"begin": "\\[(=*)\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lua"
				}
			},
			"end": "\\]\\1\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.lua"
				}
			}
		},
		"if-block": {
			"name": "meta.if-block.lua meta.block.lua",
			"begin": "\\bif\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"for-block": {
			"name": "meta.for-block.lua meta.block.lua",
			"begin": "\\bfor\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"while-block": {
			"name": "meta.while-block.lua meta.block.lua",
			"begin": "\\bwhile\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"repeat-block": {
			"name": "meta.repeat-block.lua meta.block.lua",
			"begin": "\\brepeat\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"end": "\\buntil\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"samepage-block": {
			"name": "meta.samepage-block.l65 meta.block.lua",
			"begin": "\\bsamepage\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"crosspage-block": {
			"name": "meta.crosspage-block.l65 meta.block.lua",
			"begin": "\\bcrosspage\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.lua"
				}
			},
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"logic-operator": {
			"name": "keyword.operator.logic.lua",
			"match": "\\b(and|or|not)\\b"
		},
		"operator": {
			"name": "keyword.operator.lua",
			"match": "(\\+|-|%|#|\\*|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.))"
		},
		"keyword": {
			"name": "keyword.control.lua",
			"match": "\\b(break|do|else|for|if|elseif|return|then|repeat|while|until|end|local|in)\\b"
		},
		"table-function": {
			"name": "meta.function.lua",
			"begin": "(?=\\bfunction\\s+[_[:alpha:]][_[:alnum:]]*(?:\\.[_[:alpha:]][_[:alnum:]]*)*(?:\\.(?:[_[:alpha:]][_[:alnum:]]*)|:(?:[_[:alpha:]][_[:alnum:]]*)))",
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.function-end.lua"
				}
			},
			"patterns": [
				{
					"include": "#table-function-name"
				},
				{
					"include": "#general"
				}
			]
		},
		"table-function-name": {
			"name": "meta.function.lua",
			"begin": "\\b(function)\\s+(([_[:alpha:]][_[:alnum:]]*(?:\\.[_[:alpha:]][_[:alnum:]]*)*)(?:(\\.)([_[:alpha:]][_[:alnum:]]*)|(:)([_[:alpha:]][_[:alnum:]]*)))(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.property.lua"
				},
				"3": {
					"name": "entity.name.function.lua entity.name.function-table.lua"
				},
				"4": {
					"name": "punctuation.accessor.lua"
				},
				"5": {
					"name": "entity.name.function.lua"
				},
				"6": {
					"name": "punctuation.method-accessor.lua"
				},
				"7": {
					"name": "entity.name.method-function.lua entity.name.function.lua"
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#parameters"
				}
			]
		},
		"function": {
			"name": "meta.function.lua",
			"begin": "(?=\\b(?:local\\s+)?function\\s+[_[:alpha:]][_[:alnum:]]*)",
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.function-end.lua"
				}
			},
			"patterns": [
				{
					"include": "#function-name"
				},
				{
					"include": "#general"
				}
			]
		},
		"function-name": {
			"name": "meta.function.lua",
			"begin": "\\b(?:(local)\\s+)?(function)\\s+([_[:alpha:]][_[:alnum:]]*)(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.local.lua"
				},
				"2": {
					"name": "storage.type.function.lua"
				},
				"3": {
					"name": "entity.name.function.lua"
				}
			},
			"end": "(?<=\\))",
			"endCaptures": {
				"0": {
					"name": "keyword.control.function-end.lua"
				}
			},
			"patterns": [
				{
					"include": "#parameters"
				}
			]
		},
		"anonymous-function": {
			"name": "meta.function.anonymous.lua",
			"begin": "(?=\\bfunction(?!\\s+[_[:alpha:]][_[:alnum:]]*))",
			"end": "\\bend\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.function-end.lua"
				}
			},
			"patterns": [
				{
					"include": "#anonymous-function-name"
				},
				{
					"include": "#general"
				}
			]
		},
		"anonymous-function-name": {
			"name": "meta.function.anonymous.lua",
			"begin": "\\b(function)\\s*(?!\\s+[_[:alpha:]][_[:alnum:]]*)(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.anonymous.lua"
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#parameters"
				}
			]
		},
		"parameters": {
			"name": "meta.parameters.lua",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.begin.lua"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.lua"
				}
			},
			"patterns": [
				{
					"include":"#line-comment"
				},
				{
					"include":"#block-comment"
				},
				{
					"name": "punctuation.separator.parameter.lua",
					"match": ","
				},
				{
					"name": "variable.parameter.lua",
					"match": "[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"name": "variable.parameter.rest.lua",
					"match": "\\.\\.\\."
				}
			]
		},
		"support-function-call": {
			"begin": "\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\s*[\\({]",
			"beginCaptures": {
				"1": {
					"name": "meta.function-call.lua support.function"
				}
			},
			"end": "[\\)}]",
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"support-string-function-call": {
			"begin": "\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\s*(?=[\\'\"]|\\[\\[)",
			"beginCaptures": {
				"1": {
					"name": "meta.function-call.lua support.function"
				}
			},
			"end": "(?<=[\\'\"]|\\]\\])",
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"function-call": {
			"begin": "(?=(?:[_[:alpha:]][_[:alnum:]]*[\\.:])*)([_[:alpha:]][_[:alnum:]]*)\\s*[\\({]",
			"beginCaptures": {
				"1": {
					"name": "meta.function-call.lua entity.name.function"
				}
			},
			"end": "[\\)}]",
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"string-function-call": {
			"begin": "(?=(?:[_[:alpha:]][_[:alnum:]]*[\\.:])*)([_[:alpha:]][_[:alnum:]]*)\\s*(?=[\\'\"]|\\[\\[)",
			"beginCaptures": {
				"1": {
					"name": "meta.function-call.lua entity.name.function"
				}
			},
			"end": "(?<=[\\'\"]|\\]\\])",
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"table": {
			"name": "meta.table.lua",
			"begin": "{",
			"end": "}",
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"array": {
			"name": "meta.array.lua",
			"begin": "\\[",
			"end": "\\]",
			"patterns": [
				{
					"include": "#general"
				}
			]
		},
		"table-property": {
			"match": "(\\.)([_[:alpha:]][_[:alnum:]]*)\\b(?!\\s*([\\({\\'\"]|\\[\\[))",
			"captures": {
				"1": {
					"name": "punctuation.accessor"
				},
				"2": {
					"name": "variable.other.table.property.lua"
				}
			}
		},
		"language-variable": {
			"name": "variable.language.lua",
			"match": "\\bself\\b"
		},
		"support-variable": {
			"name": "support.variable.lua",
			"match": "\\b(assert|bit32|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall|coroutine|string|table|math|io|os|package|debug)\\b"
		},
		"variable": {
			"name": "variable.other.lua",
			"match": "\\b[_[:alpha:]][_[:alnum:]]*\\b"
		},
		"label": {
			"patterns": [
				{
					"match": "\\blabel\\b",
					"name": "entity.name.label.l65"
				},
				{
					"match": "(::)([_[:alpha:]][_[:alnum:]]*)(::)",
					"captures": {
						"1": {
							"name": "punctuation.separator.label.lua"
						},
						"2": {
							"name": "entity.name.label.lua"
						},
						"3": {
							"name": "punctuation.separator.label.lua"
						}
					}
				},
				{
					"match": "(@)([[:alpha:]][_[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.separator.label.l65"
						},
						"2": {
							"name": "entity.name.label.l65"
						}
					}
				},
				{
					"match": "(@_)([_[:alpha:]][_[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.separator.label.l65.local"
						},
						"2": {
							"name": "entity.name.label.l65.local"
						}
					}
				}
			]
		},
		"section": {
			"patterns": [
				{
					"match": "(@@)([_[:alpha:]][_[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.separator.section.l65"
						},
						"2": {
							"name": "entity.name.section.l65"
						}
					}
				}
			]
		},
		"l65-preproc": {
			"name": "meta.preprocessor.l65",
			"match": "^(\\s*#\\s*pragma.*)$\n?"
		},
		"l65-operator": {
			"name": "keyword.operator.l65",
			"match": "(#|\\!|\\\\)"
		},
		"l65-datafn": {
			"name": "entity.name.function.l65",
			"match": "\\b(charset|byte|byte_hi|byte_lo|word)\\b"
		},
		"l65-keyword": {
			"name": "keyword.control.l65",
			"match": "\\b(location|section)\\b"
		},
		"l65-keyword-opcodefn": {
			"name": "entity.name.function.l65",
			"match": "\\b(adcimm|adczpg|adczpx|adcabs|adcabx|adcaby|adczab|adczax|adcinx|adciny|andimm|andzpg|andzpx|andabs|andabx|andaby|andzab|andzax|andinx|andiny|aslimp|aslzpg|aslzpx|aslabs|aslabx|aslzab|aslzax|bccrel|bcsrel|beqrel|bitzpg|bitabs|bitzab|bmirel|bnerel|bplrel|brkimp|bvcrel|bvsrel|clcimp|cldimp|cliimp|clvimp|cmpimm|cmpzpg|cmpzpx|cmpabs|cmpabx|cmpaby|cmpzab|cmpzax|cmpinx|cmpiny|cpximm|cpxzpg|cpxabs|cpxzab|cpyimm|cpyzpg|cpyabs|cpyzab|deczpg|deczpx|decabs|decabx|deczab|deczax|deximp|deyimp|eorimm|eorzpg|eorzpx|eorabs|eorabx|eoraby|eorzab|eorzax|eorinx|eoriny|inczpg|inczpx|incabs|incabx|inczab|inczax|inximp|inyimp|jmpabs|jmpind|jsrabs|ldaimm|ldazpg|ldazpx|ldaabs|ldaabx|ldaaby|ldazab|ldazax|ldainx|ldainy|ldximm|ldxzpg|ldxzpy|ldxabs|ldxaby|ldxzab|ldxzay|ldyzpg|ldyzpx|ldyabs|ldyabx|ldyzab|ldyzax|lsrimp|lsrzpg|lsrzpx|lsrabs|lsrabx|lsrzab|lsrzax|nopimp|oraimm|orazpg|orazpx|oraabs|oraabx|oraaby|orazab|orazax|orainx|orainy|phaimp|phpimp|plaimp|plpimp|rolimp|rolzpg|rolzpx|rolabs|rolabx|rolzab|rolzax|rorimp|rorzpg|rorzpx|rorabs|rorabx|rorzab|rorzax|rtiimp|rtsimp|sbcimm|sbczpg|sbczpx|sbcabs|sbcabx|sbcaby|sbczab|sbczax|sbcinx|sbciny|secimp|sedimp|seiimp|stazpg|stazpx|staabs|staabx|staaby|stazab|stazax|stainx|stainy|stxzpg|stxzpy|stxabs|stxzab|styzpg|styzpx|styabs|styzab|taximp|tayimp|tsximp|txaimp|txsimp|tyaimp)\\b"
		},
		"l65-keyword-opcodefn-illegal": {
			"name": "entity.name.function.l65",
			"match": "\\b(ancimm|aneimm|arrimm|asrimm|dcpzpg|dcpzpx|dcpabs|dcpabx|dcpaby|dcpinx|dcpiny|isbzpg|isbzpx|isbabs|isbabx|isbaby|isbinx|isbiny|jamimp|lasaby|laxzpg|laxzpy|laxabs|laxaby|laxinx|laxiny|nopimm|nopzpg|nopzpx|nopabs|nopabx|rlazpg|rlazpx|rlaabs|rlaabx|rlaaby|rlainx|rlainy|rrazpg|rrazpx|rraabs|rraabx|rraaby|rrainx|rrainy|saxzpg|saxzpy|saxabs|saxinx|sbximm|shaaby|shainy|shsaby|shxaby|shyabx|slozpg|slozpx|sloabs|sloabx|sloaby|sloinx|sloiny|srezpg|srezpx|sreabs|sreabx|sreaby|sreinx|sreiny)\\b"
		},
		"l65-keyword-opcodefn-alias": {
			"name": "entity.name.function.l65",
			"match": "\\b(dnaimm|dnazpg|dnazpx|dnaabs|dnaabx|dnaaby|dnazab|dnazax|dnainx|dnainy)\\b"
		},
		"opcodes": {
			"name": "entity.name.type.l65",
			"match": "\\b((dc\\.[bwl])|(adc(\\.[bw])?)|(and(\\.[bw])?)|(asl(\\.[bw])?)|bcc|bcs|beq|(bit(\\.[bw])?)|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|(cmp(\\.[bw])?)|(cpx(\\.[bw])?)|(cpy(\\.[bw])?)|(dec(\\.[bw])?)|dex|dey|(eor(\\.[bw])?)|(inc(\\.[bw])?)|inx|iny|jmp|jsr|(lda(\\.[bw])?)|(ldx(\\.[bw])?)|(ldy(\\.[bw])?)|(lsr(\\.[bw])?)|(nop(\\.[bw])?)|(ora(\\.[bw])?)|pha|php|pla|plp|(rol(\\.[bw])?)|(ror(\\.[bw])?)|rti|rts|(sbc(\\.[bw])?)|sec|sed|sei|(sta(\\.[bw])?)|(stx(\\.[bw])?)|(sty(\\.[bw])?)|tax|tay|tsx|txa|txs|tya)\\b"
		},
		"opcodes-illegal": {
			"name": "entity.name.type.l65",
			"match": "\\b(anc|ane|arr|asr|(dcp(\\.[bw])?)|(isb(\\.[bw])?)|jam|las|(lax(\\.[bw])?)|(rla(\\.[bw])?)|(rra(\\.[bw])?)|(sax(\\.[bw])?)|sbx|sha|shs|shx|shy|(slo(\\.[bw])?)|(sre(\\.[bw])?))\\b"
		},
		"opcodes-crossbank": {
			"name": "entity.name.type.l65",
			"match": "\\b(far|rtx|xsr)\\b"
		},
		"opcodes-alias": {
			"name": "entity.name.type.l65",
			"match": "\\b((dna(\\.[bw])?))\\b"
		}
	}
}
